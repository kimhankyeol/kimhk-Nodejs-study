//출처 :https://joshua1988.github.io/web-development/javascript/promise-for-beginners/

프로미스는 자바스크립트 비동기 처리에 사용되는 객체임
여기서 자바스크립트의 비동기 처리란 특정 코드의 실행이 완료될떄까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트의 특성을 의미함
///////////////////////////////////////////////////////////////////////
프로미스가 왜 필요한가

프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할떄 사용함
일반적으로 웹애플리케이션을 구현 할때 서버에서 데이터를 요청하고 받아오기 위해 아래와 같은 API사용함

$.get('url 주소/products/1',function(response){
//...
});

위 API가 실행되면 서버에다가 '데이터 하나 보내주세요' 요청을 보냄
여기서 데이터를 받아오기도 전에 마치 데이터를 받아온것처럼 화면에 데이터를 표시하려고 하면  오류가 발생하거나 빈화면이뜸

이와 같은 문제를 해결하기 위한 방법중 하나가 프로미스임
///////////////////////////////////////////////////////////////////////
프로미스 코드 - 기초

프로미스가 어떻게 동작하는지 이해하기 위한 예제코드 
간단한 ajax 통신 코드를

function getData(callbackFunc){
    $.get('url 주소/products/1',function(response){
        callbackFunc(response); //서버에서 받은 데이터를 response를 callbackFunc()함수에 넘겨줌
    });
}

getData(function(tableData){
    console.log(tableData); // $.get()의 response값이 tableData에 전달됨
});

위 코드는 제이쿼리의 ajax 통신을 이용하여 지정한 url에서 1번 상품 데이터를 받아오는 코드임 
비동기 처리를 위해 프로미스 대신 콜백함수를 이용함

위 코드에 프로미스 코드를 적용하면 아래와 같은 코드가 됨

function getData(callback){
    //new Promise() 추가
    return new Promise(function(resolve,reject){
        $.get('url 주소/products/1',function(response){
            //데이터를 받으면 resolve() 호츌
            resolve(response);
        });
    });
}

//getData()의 실행이 끝나면 호출되는 then()
getData().then(function(tableData){
    //resolve()의 결과 값이 여기로 전달됨
    console.log(tableData); //$.get()의 response 값이 tableData에 전달됨
});

콜백 함수로 처리하던 구조에서 new Promise() ,resolve() ,then() 와 같은 프로미스 API를 사용한 구조로 바뀌었음
/////////////////////////////////////////////////////////////////////////////////////////

프로미스의 3가지 상태 
프로미스를 사용할떄 알아야 하는 가장 기본적인 개념이 바로 프로미스의 상태임 
여기서 상태란 프로미스의 처리과정을 의미 
new Promise()로 생성하고 종료될떄까지 3가지 상태를 가짐
Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
Rejected(실패)  : 비동기 처리가 실패하거나 오류가 발생한 상태

========Pending 대기 ===================
new Promise() 메서드를 호출하면 대기 상태가됨

new Promise() 메서드를 호출할때 콜백 함수의 인자로 resolve,reject에 접근할 수 있음
new Promise(function (resolve,reject){
//...
});

=========Fulfilled(이행)==================
여기서 콜백 함수의 인자 resolve를 아래와 같이 실행하면 Fulfilled(이행) 상태가 됨

new Promise(function(resolve,reject){
    resolve();
})

그리고 이행 상태가 되면 아래와 같이 then 을 이용하여 처리 결과 값을 받을 수 있음

function getData(){
    return new Promise(function(resolve,reject){
        var data = 100;
        resolve(data);
    });
}

//resolve() 의 결과 값 data를 resolvedData로 받음
getData().then(function(resolvedData){
    console.log(resolvedData); // 100
});
//프로미스의 이행상태를 다르게 표현하면 완료 ㅇ?

=============Rejected(실패)===================
new Promise()로 프로미스 객체를 생성하면 콜백 함수 인자로 resolve 와 reject 를 사용할 수 있다고 했음
reject 인자로 reject() 메서드를 실행하면 Rejected(실패 ) 상태가 도미

new Promise(function(resolve, reject){
    reject();
})

그리고 실패 상태가 되면 catch로  실패한 이유(실패처리의 결과값)를 받을 수 있음

function getData(){
    return new Promise(function(resolve,reject){
        reject(new Error("Request is failed"));
    });
}

//reject() 의 결과 값 Error 를 err에  받음
getData().then().catch(function(err){
    console.log(err); //Error:Request is failed
});

//////////////////////////////////////////////////////////////////////////

프로미스 코드  - 쉬운 예제