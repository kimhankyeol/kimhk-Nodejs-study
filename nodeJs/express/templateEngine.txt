6.5 템플릿 엔진 사용하기

HTML은 정적인 언어임
주어진 기능만 사용할 수 있고 사용자가 기능을 직접 추가할 수 없음
HTML로 1000개나 되는 데이터를 모듀 표현하고 싶다면 일일이 직접 코딩해서 넣어주어야함
자바스크립트로 표현하면 반복문으로 간단하게 처리할수 있음
템플릿 엔진은 자바스크립트를 사용해서 HTML을 렌더링할 수 있게 해줌
따라서 기존 HTML과는 문법이 살짝 다를 수도 있고 자바스크립트 문법이 들어 있기도함

대표적인 템플릿 엔진인 Pug 와 EJS에 대해 살펴봄

6.5.1 Pug(Jade)
문법이 간단하여 코드양이 줄어들기 때문 
Ruby를 사용해 보았으면 문법이 비슷해 금방 적응할 것임
물론 Ruby를 모르는 사람도 문법이 쉬워서 빠르게 배울수 있음
단 HTML과는 문법이 많이 달라 호불호가 갈림

먼저 app.js 에 다음부분이 있어야함

app.set('views',path.join(__dirname,'views'));
app.set('view engine','pug');

views 는 템플릿 파일들이 위치한 폴더를 지정하는것임
res.render 메서드가 이 폴더 기준으로 템플릿 엔진을 찾아서 렌더링함
res.render('index')라면 views/index.pug를 렌더링 함 
res.render('admin/main')라면 views/admin/main.pug를 렌더링함
view engine은 어떠한 종류의 템플릿 엔진을 사용할지를 나타냄
현재 pug로 설정되어 있으므로 그대로 사용하면됨

HTML문법과 pug문법이 어떻게 다른지 ?


html , head ,title 태그에서는 자식태그일수록 한단계씩 들여쓰기 되어있는 모습 
화살괄호가 없으므로 태그의 속성도 조금 다르게 표현함
HTML
<!DOCTYPE html>
<html>
    <head>
        <title>익스프레스</title>
        <link rel="stylesheet" href="/stylesheet/style.css">
    </head>
<html>

Pug
doctype html
html   
    head  
        title= title
        link(rel='stylesheet',href='/stylesheet/style.css)


속성중 아이디와 클래스가 있는 경우에는 다음과 같이 표현함 . div 태그인 경우 div 생략

HTML
<div id="login-button"></div>
<div class="post-image"></div>
<span id="highlight"></span>
<p class="hidden full"></p>


Pug
#login-button
.post-image
span#highlight
p.hidden.full

HTML텍스트는 다음과 같이 태그 또는 속성 뒤에 한칸을 띄고 입력하면됨

Pug
p welcome to express
button(type='submit')전송

에디터에서 텍스트를 여러줄 입력하고 싶다면 다음과 같이 파이프(|) 를 넣어줌 . 그러면 HTML코드에서는 한줄로 나옴

pug
p
    | 안녕하세요
    | 여러줄을 입력합니다
    br
    | 태그도 중간에 넣을수 있음


HTML
<p> 안녕하세요 여러줄을 입력합니다 <br/> 태그도 중간에 넣을수 있음</p>

스타일이나 script 태그로 css 또는 자바스크립트 코드를 작성하고 싶다면 다음과 같이 태그뒤에 점 (.) 을 붙여줌

style.
    h1{
        font-size:30px;
    }
script.
    var message ='Pug';
    alert(message)


6.5.1.2 변수
HTML과 다르게 자바스크립트 변수를 템플릿에 렌더링 할수 있음
res.render호출시 보내는 변수를 Pug가 처리해줌
routes/index.js 의 코드를 보면 다음 부분이 있음

router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

res.render(템플릿,변수객체) 는 익스프레스가 res 객체에 추가한 템플릿 렌더링을 위한 메서드임 
index.pug를 HTML로 렌더링하면서 {title:'Express'} 라는 객체를 변수로 집어넣음
layout.pug 와 index.pug의 title부분이 모두 Express 로 치환됨
즉 HTML에도 변수를 사용할수 있게 된셈

res.render 메서드의 두번쨰 인자로 변수 객체를 넣는 대신 app.js의 에러 처리 미들웨어 처럼 
res.locals 객체를 사용해서 변수를 넣을수도 있음

router.get('/',function(req,res,next){
    res.locals.title = 'Express';
    res.render('index');
});

위와 같이 하면 템플릿 엔진이 res.locals 객체를 읽어서 변수를 집어 넣음 
이 방식의 장점은 현재 라우터뿐만 아니라 다른 미들웨어에서도 res.locals객체에 접근할수 있음
따라서 다른 미들웨어에서 템플릿 엔진용 변수를 미리 넣을수도 있음

이제 pug에서 변수를 사용하는 방법을 살펴봄

h1= title
p welcome to #{title}
button(class=title,type='submit') 전송
input(placeholder=title+'연습')

변수를 텍스트로 사용하고 싶으면 태그뒤에 = 를 붙인후 변수를 입력 
속성에도 = 를 붙인후 변수를 사용할수 있음
텍스트 중간에 변수를 넣으려면 #{변수} 를 사용하면 됨
#{} 의 내부와 = 기호 뒷부분은 자바스크립트로 해석함 

-var node ='Node.js'
-var js ='Javascript'
p #{node}와 #{js}

Pug는 기본적으로 변수의 특수문자를 HTML엔티티로 이스케이프함
이스케이프를 원하지 않으면 = 대신 !=를 사용하면됨
p='<strong>이스케이프</strong>'
p!='<strong>이스케이프 하지않음</strong>'

6.5.1.3 반복문
ul
    each fruit in ['사과','배','오렌지','바나나']
        li = fruit

반복문 사용시 인덱스도 가져올수 있음
ul
    each fruit in ['사과','배','오렌지','바나나']
        li =(index+1)+'번째'+fruit
6.5.1.4 조건문

조건문으로 편리하게 분기 처리 할수 있음
if ,else ,if else
다음은 isLoggedIn 변수로 로그인 여부에 따라 다르게 HTML렌더링 하는 예시

if isLoggedIn
    div 로그인 됨
else   
    div 로그인이 필요함

case 문도 가능

    when 'apple'
        p 사과임
    when 'banana'
        p 바나나임
    when 'orange'
        p 오렌지임
    default
        p 사과도 바나나도 오렌지도 아님

6.5.1.5 include 

다른 pug 나 HTML파일을 넣을수 있음
헤더나 푸터 네비게이션처럼 웹제작시 공통되는 부분을 따로 관리할수 있어 매 페이지마다 동일한 HTML을 넣어야 하는 번거로움을 없애줌 . include 파일경로로 사용함

header.pug 와 footer.pug 

main.pug
include header
main
    h1 메인파일
    p 다른 파일을 include할수 있음
include footer

6.5.1.6 extends와 block

레이아웃을 정할수 있음
공통되는 레이아웃 부분을 따로 관리 할 수 있어 좋음
include와 함께 사용하곤 함

<script src="/Javascripts/main.js"></script> 이부분을

block javascript 
    script(src="Javascripts/main.js) 
    
    바꾸고 

layout 으로 상속한다하면 
해당 pug 에 상단 부분에 extends layout으로 해주면됨
그리고 layout 가서 block javascript 선언 해주면 사용가능

레이아웃이 될 파일에는 공통된 마크업을 넣고 페이지마다 달라지는 부분을 block로 비워둠
block는 여러개 만들어도됨 
block 이 되는 파일에서는 extends 키워드로 레이아웃 파일을 지정하고 block 부분을 넣어주어야함
block 선언보다 한 단계 더 들여쓰기 되어 있어야 함 
나중에 익스프레스레서 res,render('body') 를 사용해 하나의 HTML로 합쳐 렌더링 할 수 있음
Pug 확장자는 생략가능함 


index.pug 와 error.pug를 살펴보면
block content 가 있는데 index.pug 는 title 이라는 변수를 받아  렌더링하고
error.pug도 block content가 부분이  layout과 연결되고 라우터로부터 message와 error변수를 받아 렌더링함

pug 문법에 쉽게 익숙해 지지 않는다면 EJS 라는 템플릿 엔진을 보는것이 좋음


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
6.5.2 EJS(Embedded Javascript)

EJS는 Pug의 HTML문법변화에 적응하기 힘든 사람을 위한 템플릿 엔진
HTML문법을 그대로 사용하되 추가로 자바스크립트 문법을 사용할수 있음

app.js 부분을

app.set('views',path.join(__dirname,'views'));
app.set('view engine','ejs');
 바꿔줘야됨

 그리고 패키지 설치 
 npm i ejs

 문법은 자바 문법이랑 같고 
 약간 다른거
 이스케이프
 <p><%='<strong>이스케이프</strong>' %></p>
 <p><%-'<strong>이스케이프 하지 않음</strong>' %></p>

 !!include!!!!!!!!!!!!!!!!!
 HTML 파일을 포함하려면 <%- include(파일경로 ,데이터) %> 을 하면 됨 

보통 HTML에서 크게 벗어나고 싶지 않다면 EJS , 깔끔한 문법을 원한다면 Pug를 사용함

공부하는 책은 pug를 사용함

////////////////////////////////////////////////////////////////////////////////////////////
6.5.3 에러처리미들웨어 
이제 에러처리 미들웨어의 코드가 어떤기능을 하는지 보일것임

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

에러 처리 미들웨어는 error라는 템플릿 파일을 렌더링함
렌더링 시 res.locals.message와 res.locals.error에 넣어준 값을 함께 렌더링함
res.render에 변수를 대입하는것 외에도 , 이렇게 res.local속성에 값을 대입하여 템플릿 엔진에 변수를 주입할 수 있음

error 객체는 시스템 환경이 development(개발환경)가 아닌 경우에만 표시됨
배포환경인 경우에는 에러메시지가 표시되지 않음
에러메시지가 노출되면 보안에 취약할수 있기 떄문

코드중에 req.app.get(키) 라는 것이 있음
req.app을 통해서 app객체에 접근하는 것
app.get(키)가 app.set(키)로 설정했던것을 가져오는 코드이므로 req.app.get(키)로도 가능함
예를 들어 app.set('view engine','pug')를 했다면 app.get('view engine')으로 pug라는 값을 가져올수도 있음
라우터에서는 req.app.get('view engine') 으로 가져오면 됨

만약 404 에러가 발생하면 message는 Not Found 가 됨
404 처리 미들웨어에서 넣어준 값을 사용함
error.status는 404가 되고, error.stack은 에러에 관한 상세한 메시지가 표시됨
배포 환경에서는 error 부분이 렌더링 되지 않을것임
서버 만들기를 위한 기본 준비가 다 끝남 
한가지만 더 배우면 실제 서비스를 만들수 있음
사용자들이 보낸 데이터들을 저장하는곳 바로 데이터 베이스임