웹 서버를 만들때 코드가 보기 좋지 않고 , 확장성도 떨어진다고 느꼈을 수도 있음
npm에는 서버제작시 불편함을 해소하고 편의 기능을 추가한 웹 서버 프레임 워크가 있음
대표적인 것이 익스프레스임
익스프레스는 http 모듈의 요청과 응답 객체에 추가 기능들을 부여함 
기존 메서드들도 계속 사용할 수 있지만 편리한 메서드 들을 추가하여 기능을 보완함
또한 코드를 분리하기 쉽게 만들어 관리하기도 용이함
더이상 if 문으로 요청메서드와 주소를 구별하지 않아도 됨

---익스프레스 밖에 없나요 ?
koa 나 hapi같은 웹서버 프레임워크가 있음
하지만 다운로드 수가 많은것에는 이유가 있음
많은 사람이 사용할수록 버그도 적고 기능 추가나 유지보수도 활발하게 일어남 
이것이 익스프레스가 지속적인 인기를 얻는이유

Express-generator 빠르게 설치하기

익스프레스 프레임워크는 익스프레스 외에도 많은 패키지를 사용하므로 입문자 입장에서는 필요한 패키지를 찾아서 설치하기 조금 어려움 
다행히 프레임워크에 필요한 package.json을 만들어주고 기본 폴더 구조 까지 잡아주는 패키지가 있음 
바로 Express-generator 임
express-generator를 전역 설치 해보겠음

1.   npm i -g express-generator

설치 완료되면 새익스프레스 프로젝트를 생성해봄 
새로 프로젝트를 만들고자 하는 폴더로 이동해서 express 프로젝트 이름을 입력
2.   express learn-express --view=pug
--view=pug 란 
템플릿 엔진에 대해 살펴볼텐데 Express-generator는 기본적으로 Jade를 템플릿엔진으로 설치함
하지만 Jade는 Pug로 개명한지 오래됨 
따라서 옛버전인 Jade 대신 최신버전인 Pug를 설치하기 위하여 express-generator에 옵션을 주었음
Pug대신 EJS를 템플릿 엔진으로 사용하고 싶다면 --view=ejs로 입력

learn-express라는 폴더가 생성 되었을것임

폴더에 들어가서 npm모듈들을 설치함
콘솔에서는 다음과 같이 두가지 명령어를 한번에 실행할수도 있음 
폴더 이동명령어와 npm설치 명령어 동시 실행함 명령어 사이에 &&를 붙이면 됨

3.   cd learn-express && npm i 
&& 안되면 ;

폴더구조를 살펴보면 app.js파일이 핵심적인 서버 역할을함

bin폴더의 www 파일은 서버를 실행하는 스크립트임

public 폴더는 외부(브라우저 등의 클라이언트) 에서 접근 가능한 파일들을 모아둔 곳임  (이미지 , 자바스크립트 , css등이 들어있음)

routes 폴더는 주소별 라우터들을 모아둔 곳이고 ,views 폴더는 템플릿 파일을 모아둔 곳임

앞으로 서버의 로직은 모두 routes폴더안의 파일에 작성할것이고 , 화면 부분은 views 폴더에 작성할것임

나중에 데이터베이스를 배우면 데이터 부분은 models 폴더를 만들어 그안에 작성하게 됨
이렇게 구조가 명확하게 구분되어 있어 서버를 관리하기 용이함!~!!!!!!!!!!
MVC(모델 - 뷰 - 컨트롤러 )패턴 과도 비슷함
라우터를 컨트롤러라고 보면 그렇게 생각할수 있음

코드를 살펴보기에 앞서 익스프레스를 먼저 실행해보도록 함
package.json의 scripts에 start속성이 있고, 속성값으로 node ./bin/www가 적혀 있음 
따라서 npm run start 명령어로 서버를 실행할 수 있음.
그런데 start 명령어는 특별하므로 그냥 npm start 만으로도 서버를 실행할수 있음

http://localhost:3000 으로 접속하면 화면이 뜸

콘솔에는 추가적으로 클라이언트가 보낸 요청에 관한 정보가 기록됨
http://localhost:3000/users 에도 접속해 봄 

성공적으로 익스프레스 서버를 실행함 
익스프레스 코드를 분석하여 어떤 원리로 서버가 동작하는지 알아봄

6.2 익스프레스 그저 이해하기

익스프레스는 코드가 여러개의 파일로 분산되어 있음
각 부분마다 맡은 역할이 나누어져있어 보기에도 좋고 관리하기도 좋음

먼저 핵심 파일인 bin/www를 살펴봄 
bin 폴더 아래에 들어 있는 www파일임
bin/www 파일은 http모듈에 express 모듈을 연결하고 포트를 지정하는 부분임
희한하게도 www파일에는 js 확장자가 붙어있지 않음
또한 #!/usr/bin/env node 라는 주석이 첫 줄에 달려있음
www 파일을 콘솔 명령어로 만들 수 있는데 이때 이 주석이 사용됨
콘솔명령어로 만드는것은 14장에서 배움

www 파일에서 핵심적인 부분만 보겠음 
//1
var app = require('../app');
var debug = require('debug')('learn-express:server');
var http = require('http');

//2
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//3
var server = http.createServer(app);

//4
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

1.먼저 app, debug,http 모듈들을 가져옴 app모듈은 나중에 살펴봄 .debug모듈은 콘솔에 로그를 남기는 모듈임
2.app.set('port',port) 로 서버가 실행될 포트를 설정함
process.env객체에 PORT속성이 있다면 그 값을 사용하고 , 없다면 기본값으로 3000번 포트를 이용하도록 되어 있음
이렇게 app.set('키',값) 을 사용해서 데이터를 저장할수 있고 , 나중에 데이터를 app.get(키)로 가져올 수 있음
3.http.createServer에 불러온 app모듈을 넣어줌 
app모듈이 createServer메서드의 콜백함수 역할을 함
4.listen을 하는 부분은 http 웹서버와 동일함 
4장에서 서버를 구동했던것과 동일하게 포트를 연결하고 서버를 실행함
익스프레스는 그저 콜백함수부분을 조금 다르게 만든것임

이제 app 모듈이 어떻게 생겼는지 살펴봄
app.js 
기존에 만들었던 웹서버와는 모양이 다름

var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

var app = express();//1  /////////////////////////////////////////////////////////////////////////////////

// view engine setup
//2///////////////////////////////////////
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
///////////////////////////////////////////////////

//3///////////////////////////////////////////
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});
/////////////////////////////////////////////////////////////

module.exports = app;//4//////////////////////////////////////////////////////////

1. express 패키지를 호출하여 app 변수 객체를 만듬 . 이제 이 변수에 각종 기능을 연결함
2. app.set 메서드로 익스프레스 앱을 설정할수 있음
3. app.use 로 시작하는 코드가 많은데 미들웨어를 연결하는 부분임 미들웨어는 아래서 살펴보겠음
4. 마지막에는 app객체를 모듈로 만듬   이것이 bin/www에서 사용된 app 모듈

expressStructure.jpg 참조

클라이언트의 요청을 받아서 처리한 후 다시 클라이언트에게 응답한다는 점은 4장의 http 서버와 같음
하지만 중간에 미들웨어들을 거친다는 것이 다름

6.3 미들웨어
미들웨어는 익스프레스의 핵심 
요청과 응답의 중간 에 위치하여 미들웨어라고도 부름
뒤에 나오는 라우터와 에러 핸들러 또한 미들웨어의 일종이므로 미들웨어가 익스프레스의 전부라고 해도 과언이 아님
미들웨어는 요청과 응답을 조작하여 기능을 추가하기도 하고 나쁜요청을 걸러냄 
미들웨어는 주로 app.use와 함께 사용됨
먼저 app.use의 역할에 대해 알아봄 
app.js를 보면 수많은 use 메서드가 사용되고 있음
app.use 메서드의 인자로 들어있는 함수가 미들웨어임  
미들웨어 use메서드로 app에 장착함 
제일 위의 logger('dev')부터 시작하여 미들웨어들은 순차적으로 거친후 라우터에서 클라이언트로 응답을 보냄

라우터와 에러 핸들러도 미들웨어의 일종임 . app.use로 app 과 연결해줌

6.3.1 커스텀 미들웨어 만들기
직접 미들웨어를 만들어보면서 미들웨어의 원리를 이해해봅시다.
요청이 들어올떄 콘솔에 메시지를 찍는 단순한 미들웨어 임

--코드스타일
현재 Express-generator는 ES5 문법의 코드를 생성함 6~8에서는 Express-generator가 생성하는 ES5로 실습 9장부터는 Express-generator없이 ES2015+ 문법을 사용하여 실습함

app.js 에 logger 보다 위에  
코드를 적어줌

app.use(function(req,res,next){
    console.log('저도 미들웨어입니다');
    next();
});

저장하고 서버실행
npm start 
하고 
http://localhost:3000 접속

요청 두개 즉 GET  / 와  /stylesheets/style.css 가 서버로 전달됨
각각의 요청이 모두 방금 만든 커스텀 미들웨어를 작동시킴
이렇게 서버가 받은 요청은 미들웨어를 타고 라우터 까지 전달됨
주의해야 할점 반드시 미들웨어 안에서 next()를 호출해야 다음 미들웨어로 넘어감
logger 나 express.json , express.urlencoded, cookieParser , express.static 모두 내부적으로는 next()를 호출하므로 다음 미들웨어로 넘어갈수 있음
next() 미들웨어의 흐름을 제어하는 핵심적인 함수임 
확인을 하고 next() 지워보고 서버실행후 접속하면 아무런 응답이 없고 , 브라우저에서도 계속 로딩 표시가 뜸
next()를 넣지 않아 커스텀 미들웨어에서 요청의 흐름이 끊김

next 함수에는 몇가지 기능이 더있음 
인자의 종류로 기능이 구분됨 
인자를 아무것도 넣지않으면 다음 미들웨어로 넘어감 
next 함수의 인자로 route를 넣으면 특수한 기능을 함
이것은 라우터를 배울떄 함께 알아보겠음 
route 외의 다른 값을 넣으면 다른 미들웨어나 라우터를 건너 뛰고 바로 에러 핸들러로 이동함
넣어준 값은 에러에 대한 내용으로 간주됨

next()  -> 다음 미들웨어
next('route') -> 다음 라우터 
next(error) -> 에러 핸들러

익스프레스가 생성해주는 에러 핸들링 미들웨어를 보면 이해하기 쉬움 
가장 흔한 에러가 404 에러임 
라우터에 등록되지 않은 주소로 요청이 들어 올때 발생함
이 경우에는 404 not found 상태 코드로 응답해주어야 함



// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

404 에러를 만들어 내는 미들웨어 
라우터에서 요청이 처리되지 않으면 (일치하는 주소가 없다면) 요청은 라우터 다음에 위치한 이 미들웨어로 오게됨 
http-errors(createError) 패키지가 404 에러를 만들어내고 , 이 에러를 next에 담아 에러 핸들러로 보내고 있음


// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

이 미들웨어의 내용은 템플릿 엔진을 다룰 때 배움 . 
다른 미들웨어와 다르게 함수의 매개변수가 4개임 
req전에 err 이라는 매개변수가 추가 됨
next 함수에 넣어준 인자가 err 매개 변수로 연결됨 
에러 핸들링 미들웨어는 일반적으로 미들웨어 중 제일 아래에 위치하여 위에 있는 미들웨어에서 발생하는 에러를 받아서 처리함

이번에는 app.use 의 응용방법에 대해서 알아 보겠음 하나의 use에 미들웨어를 여러개 장착할수 있음
순서대로 실행됨

app.use('/',function(req,res,next){
    console.log('첫번째 미들웨어');
    next();
},function(req,res,next){
    console.log('두번쨰 미들웨어');
    next();
},function(req,res,next){
    console.log('세번쨰 미들웨어');
    next();
});

이 성질을 활용하여 Express-generator가 생성한 코드도 다음과 같이 줄일수 있음

app.use(logget('dev'),express.json(),.....);

next를 호출하지 않으면 다음 미들웨어를 넘어가지 않는다는 성질을 사용하여 다음과 같은 미들웨어도 만들수 있음

app.use(function(req,res,next){
    if(+new Date() % 2 === 0){
        return res.status(404).send('50%실패');
    }else{
        next();
    }
},function(req,res,next){
    console.log('50%성공');
    next();
});

50%확률로 404 Not Found를 응답하거나 다음 미들웨어로 넘어가는 미들웨어 임

6.3.2 morgan
현재 콘솔에 나오는 GET / 200 51.267 ms -1539 같은 로그는 모두 morgan 미들웨어에서 나오는 것임 
요청에 대한 정보를 콘솔에 기록해줌
순서대로 HTTP요청 주소 HTTP 상태코드 응답속도 응답바이트

보통 개발시에는 short 나 dev를 많이 쓰고 배포시에는 common 이나 combined를 많이 사용함
인자를 바꿔서 로그가 어떻게 달라지는지 확인해 보기
콘솔뿐만 아니라 파일이나 데이터베이스에 로그를 남길 수도 있음
하지만 이러한 작업을 할때는 winston모듈을 더 많이 사용함

6.3.3
body-parser 
요청의 본문을 해석해주는 미들웨어임
보통 폼데이터나 AJAX 요청의 데이터를 처리함
app.js 에서는 body-parser를 사용하지 않았음
4.16.0 버전부터 body-parser의 일부 기능이 익스프레스의 내장되었기 때문
기본 예)
var bodyParser = require('body-parser');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:false})));

express 예)
app.use(express.json());
app.use(express.urlencoded({extended:false}));

단 body-parser가 필요한 경우도 있음
body-parser는 JSON과 URL-encoded형식의 본문 외에도 Raw,Text 형식의 본문을 추가로 해석할 수 있음
Raw는 본문이 버퍼 데이터 일때 Text 는 본문이 텍스트 데이터 일때 해석하는 미들웨어 임
서비스에 적용하고 싶다면 body-parser를 설치한 후 다음과 같이 추가함

app.use(bodyParser.raw());
app.use(bodyParser.text());

JSON 은 JSON형식의 데이터 전달 방식이고 , URL-encoded는 주소 형식으로 데이터를 보내는 방식임 
보통 폼 전송이 URL-encoded 방식을 주로 사용함 
urlencoded메서드를 보면 {extended:false}라는 옵션이 들어 있음
이 옵션이 false면 노드의 querystring 모듈을 사용하여 쿼리스트링을 해석하고 , true면 qs 모듈을 사용하여 쿼리스트링을 해석함
qs모듈은 내장모듈이 아니라 npm패키지임  , querystring모듈의 기능을 조금 더 확장한 모듈
POST와 PUT 요청의 본문을 전달받으려면 req.on('data') 와 req.on('end')로 스트림을 사용해야 했던것을 기억하고 있는지 ?
body-parser는 그럴 필요가 없음
이 패키지가 내부적으로 본문을 해석해 req.body에 추가해줌

예를 들어 JSON 형식으로 {name:'kim',book:'nodejs'}를 본문으로 보내면 req, body에 그대로 들어감
URL-encoded 형식으로 name=kim&book=nodejs 를 본문으로 보내면 
req.body에 {name:'kim',book:'nodejs'}가 들어가서
body-parser가 모든 본문을 해석해주는 것은 아님 
multipart/form-data 같은 폼을 통해 전송된 데이터는 해석하지 못함
이는 다른 모듈을 사용해서 해석해야함 


6.3.4 cookie-parser

cookie-parser는 요청에 동봉된 쿠키를 해석해줌 
parseCookie 함수와 기능이 비슷함

var cookieParser = require('cookie-parser');
app.use(cookieParser());
해석된 쿠키들은 req.cookies객체에 들어감
예를 들어 name = kim 쿠키를 보냈다면 req.cookies는 {name:'kim'} 이 됨

app.use (cookieParser('secret code'));
이와 같이 첫번째 인자로 문자열을 넣어줄수 있음
이제 쿠키들은 제공한 문자열로 서명된 쿠키가 됨
서명된 쿠키는 클라이언트에서 수정했을떄 에러가 발생하므로 클라이언트에서 쿠키로 위험한 행동을하는것을 방지 할수 있음

6.3.5 static 
static 미들웨어는 정적인 파일들을 제공 
익스프레스 4버전에서 유일하게 익스프레스에 내장되어있던 미들웨어임

함수의 인자로 정적파일들이 담겨있는 폴더를 지정하면됨 
현재 public 폴더가 지정되어 있음
public/stylesheets/style.css는 http://localhost:3000/stylesheets/style.css로 접근할수 있음

실제 서버의 폴더 경로에는 public이 들어 있지만 요청주소에는 public이 들어 있지 않다는 점을 주목
서버의 폴더 경로와 요청경로가 다르므로 외부인이 서버의 구조를 쉽게 파악할 수 없음
이는 보안에 큰 도움이 됨
또한 정적 파일들을 알아서 제공해주므로 fs.readFile로 파일을 직접 읽어서 전송할 필요가 없음

app.use('/img',express.static(path.join(__dirname,'public')));
이와 같이 정적파일을 제공할 주소를 지정할 수도 있음
public 폴더안에 abc.png가 있다고 가정하면 앞에 /img 경로를 붙인 http://localhost:3000/img/abc.png 주소로 접근할 수 있음

static 미들웨어는 요청에 부합하는 정적 파일을 발견한 경우 응답으로 해당파일을 전송함 
이 경우 응답을 보냈으므로 다음에 나오는 라우터가 실행되지 않음 만약 파일을 찾지 못했다면 요청을 라우터로 넘김
이렇게 자체적으로 정적 파일 라우터 기능을 수행하므로 최대한 위쪽에 배치하는것이 좋음
그래야 서버가 쓸데없는 미들웨어 작업을 하는 것을 막을수 있음

그리고 미들웨어의 순서를 자신의 서비스에 맞는 위치로 선택해야됨

6.3.6 express-session
세션 관리용 미들웨어 
로그인 등의 이유로 세션을 구현할때 매우 유용함
express-generator로는 설치 되지 않으므로 다음과 같이 설치
npm i express-session
설치하고 app.js 에 express-session을 연결함

var session = require('express-session');

//express-session
app.use(session)({
  resave:false,
  saveUninitialized: false,
  secret: 'secret code',
  cookie:{
    httpOnly:true,
    secure:false
  }
});

express-session은 인자로 세션에 대한 설정을 받음 
resave라는 요청이 왔을때 세션에 수정사항이 생기지 않더라도 세션을 다시 저장할지에 대한 설정
saveUninitialized는 세션에 저장할 내역이 없더라고 세션을 저장할지에 대한 설정
보통 방문자를 추적할때 사용됨
현재는 둘다 필요없으므로 false 
secret은 필수 항목으로 cookie-parser의 비밀키 같은 역할을 함
express-session은 세션관리시 클라이언트에 쿠키를 보냄 
이를 세션쿠키라고 부름
안전하게 쿠키를 전송하려면 쿠키에 서명을 추가해야하고 쿠키를 서명하는데 secret의 값이 필요함 
cookie-parser의 secret과 같게 설정해야됨
cookie 옵션은 세션쿠키에 대한 설정
maxAge,domain,path,expires ,sameSite,httpOnly,secure 일반적인 쿠키 옵션이 모두 제공됨
httpOnly를 사용해서 클라이언트에서 쿠키를 확인하지 못하도록했고 secure는 false 로 해서 https가 아닌 환경에서도 사용할수 있게 함
배포시에는 https 를 적용하고 secure도 true로 설정하는 것이 좋음
store 라는 옵션도 있음. 현재는 메모리에 세션을 저장하도록 되어 있음 
문재는 서버를 재시작하면 메모리가 초기화되어 세션이 모두 사라진다는것임
따라서 배포시에는 store에 데이터베이스를 연결하여 세션을 유지하는것이 좋음
보통 레디스가 자주 쓰임 
레디스의 사용방법은 15장

express-session은 req객체 안에 req.session 객체를 만듬
이 객체에 값을 대입하거나 삭제해서 세션을 변경할수 있음
나중에 세션을 한번에 삭제하려면 req.session.destroy() 메서드를 호출하면됨 
현재 세션의 아이디는 req.sessionID로 확인할 수 있음

6.3.7 connect-flash
상대적으로 중요도가 떨어지는 미들웨어임 
하지만 일회성 메시지들을 웹 브라우저에 나타낼때 좋음
일회성 메시지라는 성질을 이용하여 로그인 에러나 회원가입 에러같은 일회성 경고 메시지는 flash미들웨어로 보내면 좋음
너무 많은 미들웨어를 연결하면 응답이 느려질수 있음

6.4 Router 객체로 라우팅 분리하기
앞에서 라우터를 만들때 요청 메서드와 주소별로 분기 처리를 하느라 코드가 매우 복잡했음
if문으로 분기하여 코딩할때 보기에도 좋지 않고 확장하기도 어려움 
익스프레스를 사용하는 이유중 하나가 바로 라우팅을 깔끔하게 관리할수 있다는 점 때문임

app.js 라우터 부분 을 살펴봄

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
app.use('/', indexRouter);
app.use('/users', usersRouter);

익스프레스 앱과는 다르게 app.use('/',indexRouter)와 app.use('/users', usersRouter)로 연결되어있음 
app.use를 사용하므로 라우터도 일종의 미들웨어라고 볼수 있음
다른 미들웨어와는 다르게 앞에 주소가 붙어 있음
이와 같이 라우팅 미들웨어는 첫번째 인자로 주소를 받아서 특정 주소에 해당하는 요청이 왔을떄만 미들웨어가 동작하게 할 수 도 있음
주소가 / 로 시작하면 routes/index.js 를  /user로 시작하면 routes/users.js를 호출하라는 의미임

use 대신 get, post, put , patch , delete 같은 HTTP메서드를 사용할 수 있음

app.use('/',function(req,res,next){
    console.log('/주소의 요청일때 실행됨 HTTP메서드는 상관없음');
    next();
});
app.get('/',function(req,res,next){
    console.log('GET 메서드  /주소의 요청일때 실행됨 ');
    next();
});
app.post('/',function(req,res,next){
    console.log('POST /주소의 요청일때 실행됨 ');
    next();
});

use 메서드는 모든 HTTP 메서드에 대해 요청주소만 일치하면 실행되지만 get, post, put , patch , delete 같은 것들은 HTTP메서드와 주소까지 일치해야됨 

app.js
app.use('/', indexRouter);
app.use('/users', usersRouter);


예)index.js
var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

module.exports = router;

router 객체는 express.Router()로 만듬
마지막엔 module.exports = router; 로 라우터를 모듈로 만듬
router에도 app 처럼 use , get , post, put, patch,delete 같은 메서드를 붙일수 있음
use를 제외하고 각각 HTTP요청메서드와 상응함

router 하나에 미들웨어를 여러개 장착할수도 있음
실제 라우터 로직이 실행되는 미들웨어 전에 로그인 여부 또는 관리자 여부를 체크하는 미들웨어를 중간에 넣어두곤 함
다음과 같은 것이 가능하다는 뜻

router.get('/',middleware1,middleware2,middleware3);

router.get('/') 이면 / 주소로 GET 요청을 하는것과 같은 
res.render메서드로 클라이언트에 응답을 보냄 
익스프레스가 응답 객체에 새로 추가한 메서드임 
이 메서드는 템플릿 엔진을 사용하는 부분임

예) users.js
var express = require('express');
var router = express.Router();

/* GET users listing. */
router.get('/', function(req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;

router.get('/') 이 있음 
app.js 에서 app.use('/users', usersRouter); 로 연결했기 때문에

/users 와  /  이 합쳐져 /users/로 GET요청을 했을때 이 라우터의 콜백함수가 실행됨

사실 라우터(express.Router())를 사용할 필요 없이 app.js 에서 app.get('/',미들웨어),app.get('/users', 미들웨어)를 해도 동일함
하지만 코드 관리를 위해서 라우터를 별도로 분리하는 것임

라우터 에서는 반드시 요청에 대한 응답을 보내거나 에러 핸들러로 요청을 넘겨야 함 
응답을 보내지 않으면 브라우저는 계속 응답을 기다림 

응답에 제한 시간이 있으므로 영원히 기다리지는 않지만 기다리는 동안 다른 동작을 수행할 수 없을 수도 있음
res 객체에 들어있는 메서드들로 응답을 보냄

next 함수에는 라우터에서만 동작하는 특수기능이 있음
next('route') 임 
라우터에서 연결된 나머지 미들웨어들을 건너뛰고 싶을때 사용함

같은 라우터를 2개 만들었을떄
예 ) kim.js  

var express = require('express');
var router = express.Router();

router.get('/',function(req,res,next){
    next('route');
},function(req,res,next){
    console.log('실행되지 않습니다.');
    next();
},function(req,res,next){
    console.log('실행되지 않습니다.');
    next();
});

router.get('/',function(req,res){
    console.log('실행됨');
    res.render('index',{title:'Express'});
});
첫번째 라우터의 첫번쨰 미들웨어에서 next('route')를 호출하자 두번쨰  세번쨰 미들웨어는 실행되지 않음 
대신 주소와 일치하는 다음 라우터로 넘어감

유용한 팁이 하나 더 있음 
라우터 주소에는 특수한 패턴을 사용할수 있음
여러가지 패턴이 있지만 자주쓰이는 패턴 하나만 예를 통해 알아보겠음

예)
router.get('/users/:id",function(req,res){
    console.log(req.params,req,query);
});

주소에 :id 가 있는데 문자 그대로 :id 를 의미하는것이 아님 
이 부분에는 다른 값을 넣을수 있음
/users/1 이나 /users/123 등의 요청도 이 라우터에 걸림 
이 방식의 장점은 :id 에 해당하는 1 이나 123 을 조회할 수 있다는 점임 
req.params 객체 안에 들어 있음
:id면 req.params.id로 , :type이면  req.params.type 으로 조회할 수 있음

주소에 쿼리스트링을 쓸떄도 있음 
쿼리스트링의 키-값 정보는 req.query 객체 안에 들어 있음
예를 들어 /user/123?limit=5&skip=10 이라는 주소의 요청이 들어 왔을떄 req.params와 req.query객체는 다음과 같음

{id:'123'} {name:'kim',age:'28'}
요청 주소에 대한 정보가 담겨 있어 요긴하게 활용할수 있음

단 이 패턴을 사용할떄 주의 할점이 있음

일반 라우터 보다 뒤에 위치해야함
다양한 라우터를 아우르는 와일드 카드 역할을 하므로 일반 라우터 보다는 뒤에 위치해야 다른 라우터를 방해하지 않음

에러가 발생하지 않았다면 라우터는 요청을 보낸 클라이언트에게 응답을 보내주어야함
응답 메서드는 여러가지지만 공부하는 책에서는 send , sendFile , json,redirect ,render 를 주로 사용함

send 는 만능메서드 
버퍼 데이터나 문자열을 전송하거나 HTML 코드를 전송하기도 하고 JSON데이터도 전송할 수 있음
sendFile은 파일을 응답으로 보내주는 메서드고 ,
json은 JSON데이터를 보내줌 
redirect는 응답을 다른 라우터로 보내버림
예를 들어 로그인 완료후 다시 메인 화면으로 돌아갈떄 res.redirect(메인 화면 주소)를 하면됨

res.send(버퍼 또는 문자열 또는 HTML 또는 JSON)
res.sendFile(파일경로);
res.json(JSON데이터);
res.redirect(주소);
res.render('템플릿 파일경로',{변수});

기본적으로 200 HTTP 상태코드를 응답하지만 (res.redirect는 302) 직접 바꿔줄수도 있음
다음과 같이 status 메서드를 먼저 사용하면 됨

res.status(404).send('NotFount')

render 메서드는 템플릿 엔진을 렌더링할떄 사용함
views폴더 안 puh확장자를 가지고 있는 파일들이 템플릿 엔진임

--응답을 여러번 보내는 경우
하나의 요청에 대한 응답은 한번만 보내야함 
두번이상 보내면 에러뜸
Cant set headers after they are saveUninitialized


마지막으로 라우터가 요청을 처리하지 못할때는 ?
요청을 처리할수 있는 라우터가 없다면 다음 미들웨어로 넘어감 
404HTTP 상태코드를 보내주어야 하므로 다음 미들웨어에서 새로운 에러를 만들고 에러의 상태코드를 404 로 설정한뒤 에러처리 미들웨어로 넘김