/*
단방향 암호화 
비밀번호는 보통 단방향 암호화 알고리즘을 사용해서 암호화함 
단방향 암호화란 복호화 할수 없는 암호화 방식을 뜻함
단방향 암호화는 한번 암호화하면 원래 문자열을 찾을 수 없음

복호화할수 없는 암호화가 왜 필요한지 의문이 들수 있음 .
하지만 생각해보면 고객의 비밀번호는 복호화할 필요가 없음.
먼저 고객의 비밀번호를 암호화해서 데이터베이스에 저장함
그리고 로그인할떄 입력받은 비밀번호를 같은 암호화 알고리즘으로 암호화 한후 
데이터베이스의 비밀번호와 비교하면됨
그렇게 되면 원래 비밀번호는 어디에도 저장되지 않고 암호화된 문자열로만 비교함

단방향 암호화 알고리즘은 주로 해시 기법을 사용함
해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식

노드에서 해시함수는 아래와 같이 사용함
*/

const crypto = require('crypto');

console.log('base64 : ',crypto.createHash('sha512').update('비밀번호').digest('base64'));
console.log('hex :',crypto.createHash('sha512').update('비밀번호').digest('hex'));
console.log('base64:',crypto.createHash('sha512').update('다른 비밀번호').digest('base64'));


/*비밀번호라는 문자열을 해시를 사용해 바꿔보았음 */
//createHash(알고리즘)  사용할 해시 알고리즘을 넣어줌    
//  md5 , sha512, sha1 , sha256 사용가능 / md5,sha1은 이미 취약점이 발견됨 / 현재는 sha512 정도로 충분하지만 나중에 sha512마저도 취약해지면 더 강화된 알고리즘으로 바꿔야됨

//update(문자열) 변환할 문자열을 넣어줌
//digest(인코딩)  인코딩할 알고리즘을 넣어줌. / base64, hex ,latin1 이 주로 사용됨 / 그중 base64가 결과 문자열이 가장 짧아 애용됨 / 결과물로 변환된 문자열을 반환함

/*가끔 nopqrst라는 문자열이 qvew로 변환되어 abcdefgh 를 넣었을떄와 똑같은 출력 문자열로 바뀔떄도 있음
 이런 상황을 충돌이 발생했다고 표현 
 해킹용 컴퓨터의 역할은 어떠한 문자열이 같은 출력 문자열을 반환하는지 찾아내는것 
 여러 입력 문자열이 같은 출력 문자열로 변환될수 있으므로 abcdefgh 설정해도 nopqtrst로 뚫리는 사태가 발생하게 됨

해킹용컴퓨터의 성능이 발달함에 따라 기존 해시 알고리즘들이 위협받음
sha512도 취약점이 발견될거임 
그렇게 되면 더 강력한 알고리즘인 sha3로 이전하면됨

현재는 주로 pbkdf2 , bcrypy , scrypt 라는 알고리즘으로 비밀번호를 암호화 하고 있음
이중 노드에서 지원하는 pbkdf2에 대해 알아 보겠음 .
pbkdf2는 간단히 말하면 기존 문자열에 salt라고 불리는 문자열을 붙인후 해시 알고리즘을 반복해서 적용하는것 
 */