////5-1 npm알아보기
npm 은 Node Package Manager의 약어로 이름 그대로 노드 패키지 매니저입니다
노드가 자바스크립트 프로그램을 컴퓨터에서도 실행할 수 있게 해준다고 이야기함
대부분의 자바스크립트 프로그램은 패키지라는 이름으로 npm에 등록되어 있으므로 특정기능을 하는 패키지가 필요하다면 npm에서 찾아 설치하면됨

npm에는 60만개(2018년 5월 기준)에 달하는 패키지가 등록되어 있음
이는 세계 최대 규모임
방대한 양의 패키지들은 노드와 자바스크립트의 생태계를 더욱 견고하게 만들소 있음
게다가 대부분 오픈소스여서 노드를 사용해 웹을 개발 할떄 많은 도움이 됨

npm에 업로드된 노드 모듈을 패키지라고 부름
모듈이 다른 모듈을 사용할 수 있는 것처럼 패키지가 다른 패키지를 사용할 수도 있음
이런 관계를 의존관계라고 부름

npm에 대체자로 yarn이 있음 yarn은 페이스북이 내놓은 패키지 매니저입니다
React 나 React Native 같은 페이스북 진영의 프레임워크를 사용할 떄 종종 볼 수 있음
npm의 사용 방법을 안다면 Yarn도 쉽게 익힐수 있음
npm과 비교해서 편리한 기능이 몇 가지 들어 있지만 따로 설치해야함
npm 서버가 너무 느릴 경우 yarn으로 패키지를 대신 설치 할 수 있음


////5-2 package.json 으로 패키지 관리하기
서비스에 필요한 패키지를 하나씩 추가하다 보면 패키지 수가 100개를 넘게되는 경우가 있음
그리고 사용할 패키지는 저마다 고유한 버전이 있으므로 어딘가에 기록해두어야함
같은 패키지라도 버전별로 기능이 다를 수 있으므로 동일한 버전을 설치하지 않으면 문제가 생김
설치한 패키지의 버전을 관리하는 파일이 바로 package.json

--------중요!!---
따라서 프로젝트를 시작하기 전에 package.json부터 만들고 시작하는 것이 좋음
npm은 package.json 을 만드는 명령어를 제공함
먼저 콘솔로 프로젝트를 시작할 폴더로 이동후 명령어 입력

npm init
순서대로 
package name (폴더명) : 프로젝트 이름 입력 npmtest
version : 패키지의 버전  npm의 버전은 다소 엄격하게 관리됨
description : 프로젝트 설명  입력 
entry point : 자바스크립트 실행 파일 진입점임 . 보통 마지막으로 module.exports 를 하는 파일을 지정함 . package.json의 main속성에 저장됨
test command : 코드를 테스트할떄 입력할 명령어를 의미함  package.json script속성안에 test 속성에 저장됨
git repository : 코드를 저장해둔 Git 저장소 주소를 의미함 . 나중에 소스의 문제가 생겼을떄 사용자들이  이 저장소에 방문해 문제를 제기할 수도 있고 코드 수정본을 올릴수도 있음 / package.json의 repository속성에 저장됨
keywords : 키워드는 npm 공식홈페이지에서 패키지를 쉽게 찾을수 있게 해줌 . package.json의 keywords 속성에 저장됨
license : 해당 패키지의 라이선스를 넣어주면됨
// 오픈소스라고 해서 모든패키지를 아무런 제약없이 사용할 수 있는것은 아님 
//라이선스 별로 제한 사항이 있으므로 설치전에 반드시 라이선스를 확인해야함

정보를 다입력하면 package.json 미리보기가 나옴 
올바르게 입력했으면 마지막에 yes 를 입력
몇가지 명령어 들은 필요없으므로 다음 엔터키 누르면됨

package.json 실행
미리보기에 나왔던 그대로 생성됨 
{
  "name": "npmtest",
  "version": "1.0.0",
  "description": "test npm kimhk1030",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "kimhankyeol",
  "license": "ISC"
}

혹시 package.json의 내용이 다르다면 앞으로의 실습을 위해 위와 같이 내용을 수정해주면됨

script부분은 npm명령어를 저장해두는 부분임 
콘솔에서 npm run [스크립트 명령어]를 입력하면 해당 스크립트가 실행됨
예를 들어 npm run test를 하면 echo "Error : no test specified" && exit 1 실행됨 
echo "Error:no test specified" 는 콘솔에 해당 문자열을 출력하라는 뜻이고 exit 1 은 에러와 함께 종료하라는 뜻임
콘솔에 직접 명령어 실행
npm run test

test 스크립트 외에도 scripts 속성에 명령어 여러 개를 등록해두고 사용할 수 있음
보통 start 명령어에 node [파일명] 을 저장해두고 npm start 로 실행함
start 나 test 같은 스크립트는 run을 붙이지 않아도 실행 됨 

이제 패키지들을 설치해 볼 것임 
익스프레스를 설치해보겠음
npm install 패키지 이름  package.json이 있는 폴더의 콘솔에서 입력하면 됨
npm install express

이렇게 첫 패키지를 설치했음 
설치한 패키지가 package.json에 기록됨
{
  "name": "npmtest",
  "version": "1.0.0",
  "description": "test npm kimhk1030",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "kimhankyeol",
  "license": "ISC",
  "dependencies": {
    "express": "^4.16.4"
  }
}

dependencies라는 속성이 새로 생겼고 , express 라는 이름과 함께 설치된 버전이 저장됨
설치된 버전은 이 책과 다를 수 있음
버전 앞에 ^표시가 붙어있는데 여기에는 특별한 의미가 있음
다음 패키지 버전 설명할떄 공부할것임
--------------------------------------------------------------
//npm WARN npmtest@0.0.1 No repository field 
이 경고는 package.json에 repository속성이 없어서 발생한 것 
나중에 소스코드를 GitHub 나 Gitlab등 과 같은 저장소에 저장한 후 repository 속성을 만들고 GitHub나 Gitlab 주소를 적어주면 됨

// --save 옵션
패키지를 설치 할떄 npm install 명령어에 --save 옵션을 붙이는 책이나 블로그를 많이 볼 수 있음
dependencies에 패키지 이름을 추가하는 옵션이지만 npm@5부터는 기본값으로 설정되어 있으므로 따로 붙이지 않아도됨
---------------------------------------------------------------

추가로 node_modules 라는 폴더도 생성됨
그 안에 설치한 패키지들이 들어 있음 
분명히 Express 하나만 설치했는데 패키지가 여러개 들어있음 
이는 Express가 의존하는 패키지임
패키지 하나가 다른 여러 패키지에 의존하고 , 그 패키지들은 또 다른 패키지들에 의존함
의존관계가 복잡하게 얽혀 있어 package.json이 필요한것

package-lock.json 이라는 파일도 생성됨
내용을 보면 직접 설치한  express 외에도 node_module에 들어있는 패키지들의 정보가 담겨 있음 
npm으로 패키지를 설치 , 수정 , 삭제 할 떄마다 내부 의존 관계를 이 파일에 저장함

이제 모듈 여러개를 동시에 설치해 보겠음
npm install 패키지1 패키지2 패키지3 과 같이 패키지들을 나열하면 됨
npm install morgan cookie-parser express-session

npm WARN npmtest@1.0.0 No repository field.

+ cookie-parser@1.4.3
+ morgan@1.9.1
+ express-session@1.15.6
added 8 packages from 5 contributors and audited 145 packages in 1.515s
found 0 vulnerabilities

설치한 패키지의 버전은 이 책과 다를 수 있음 
설치한 패키지들이 dependencies 속성에 기록됨
package.json 확인

개발용 패키지를 설치할 수도 있음 실제 배포시에는 사용되지 않고 개발중에만 사용되는 패키지들임 !!!
npm install --save-dev 패키지1 패키지2  로 설치 
여기서는 나중에 사용할 nodemon 패키지를 설치해보겠음 
소스코드가 바뀔떄마다 자동으로 노드를 재실행 해주는 패키지임

npm install --save-dev nodemon
package.json에 새로운 속성이 생김
새로 생긴 devDependencies 속성에서는 개발용 패키지들만 따로 관리함

npm에는 전역 설치라는 옵션도 있음
패키지를 현재 폴더의 node_modules에 설치하는 것이 아니라 npm이 설치되어 있는 폴더(윈도의 경우 기본 경로는 C:\Users\사용자이름\AppData\Roamisung\npm)에 설치하는
이 폴더의 경로는 보통 시스템환경 변수에 등록되어 있으므로 전역 설치한 패키지는 콘솔의 커맨드로 사용할 수 있음

전역 패키지 한개를 설치하여 사용해보겠음
npm install --global rimraf

리눅스나 macOS 에서는 전역설치시 관리자 권한이 필요하므로 sudo 붙여줘야함

rimraf는 리눅스나 macOS 의 rm -rf 명령어를 윈도에서도 사용할 수 있게 해주는 패키지임 
rm -rf 는 지정한 파일이나 폴더를 지우는 명령어임 
전역 설치 했으므로 rimraf 명령어를 콘솔에서 사용할 수 있음
전역설치한 패키지는 package.json에 기록되지 않음

rimraf로 node_modules 폴더를 삭제해보겠음
rimraf node_modules

node_modules 는 언제든지 npm install로 설치 할 수 있으므로 node_modules는 보관할 필요가 없다는 점을 알 수 있음.
Git 같은 버전관리 프로그램과 같이 사용할때도 node_modules는 커밋하지 않음
중요한 파일은 package.json임

---------------------------------------------------------------
npx 명령어
전역 설치를 기피하는 개발자들도 있음 
전역 설치한 패키지는 package.json에 기록되지 않아 다시 설치할 때 어려움이 있음
이러한 경우 npx 명령어가 있음
npm install --save-dev rimraf
npx rimraf node_modules

위와 같이 rimraf 모듈을 package.json 의 devDependencies속성에 기록한 후 , 앞에 npx 명령어를 붙여 실행함
패키지를 전역 설치한것과 같은 효과를 얻을수 있음

npm에 등록되지 않은 패키지
모든 패키지가 npm에 등록된것은 아님 
일부는 개발중인 패키지가 있음 
그러한 패키지는 GitHub나 nexus  저장소에 보관되어 있을 수도 있음
npm install 저장소주소
명령어를 통해 설치할수 있음

명령어 줄여쓰기
npm install 명령어는 npm i 로 줄여쓰기 가능
--save-dev 옵션은 -D로,
--global 옵션은 -g로 줄여서 써도됨
---------------------------------------------------------------


/////////5-3 패키지 버전 이해하기
노드 패키지들의 버전은 항상 세자리 
심지어 노드의 버전도 세자리
버전이 세자리인 이유는 SemVer 방식의 버전 넘버링을 따르기 때문
SamVer는 Semantic Versioning(유의적 버전)의 약어 
버전을 구성하는 세자리가 모두 의미를 가지고 있음

버전번호를 어떻게 정하고 올려야 하는지 명시하는 규칙이 등장함 . 이것이 바로 SemVer
버전의 첫번쨰 자리는 major버전임 
주 버전이 0이면 초기 개발중 
1부터 정식버전
major 버전은 하위호환이 안될 정도로 패키지의 내용이 수정 되었을떄 올림
1.5.0 -> 2.0.0 으로 올렸다는것은 1.5.0 버전 패키지를 사용하고 있던 사람들이 2.0.0으로 업데이트 했을때 에러가 발생할 확률이 크다는 뜻

두번쨰자리는 minor 버전임
minor 버전은 하위 호환이 되는 기능 업데이트시 올림
1.5.0 - > 1.6.0 으로 업데이트 했을때 아무 문제가 없어야됨

세번째 자리는 patch 버전 
새로운 기능이 추가되었다기보다는 기존기능에 문제가 있어 수정한 것을 내놓았을떄 patch 버전을 올림
1.5.0->1.5.1 당연히 업데이트후 문제 없어야됨

새 버전을 배포한 후에는 그 버전의 내용을 절대 수정하면 안됨

배포된 버전 내용이 바뀌지 않기 떄문에 패키지간 의존관계에 도움이 됨

package.json에는 SemVer식 세자리 버전외에도 버전 앞에 ^ 나 ~ 또는 >,< 같은 문자가 붙어 있음
이 문자는 버전에는 포함되지 않지만 설치 또는 업데이트 시 어떤 버전을 설치해야 하는지 알려줌

가장 많이 보는 기호는 ^임 
minor버전까지만 설치 또는 업데이트 함 
npm i express@^1.1.1이라면 1.1.1 <= 버전 <2.0.0 까지 설치됨 2.0.0은 설치 되지 않음
npm i express@~1.1.1 이라면 1.2.0까지 설치됨 1.1.x 표현
~보다^를 많이 사용하는 이유는 minor 버전까지는 하위 호환 보장


////////////5-4 기타 npm명령어

npm으로 설치한 패키지를 사용하다 보면 새로운 기능이 추가되거나 버그를 고친 새로운 버전이 나올떄가 있음
npm outdated 명령어로 업데이트할 수 있는 패키지가 있는지 확인해보면 됨

Current 와 Wanted 가 다르다면 업데이트가 필요한 경우  
이럴때는 npm update 패키지명 으로 업데이트 할수있음 
npm update를 하면 업데이트 가능한 모든 패키지가 Wanted에 적힌 버전으로 업데이트 됨

npm uninstall 패키지명   해당패키지 제거하는 명령어
npm rm 패키지명 으로 줄여 쓸 수도 있음
npm search 검색어  npm의 패키지를 검색할 수 있음

윈도나 맥에서는 브라우저를 통해 npm 공식사이트에서 검색하는 것이 편리할 것임
하지만 GUI가 없는 리눅스에서는 이 명령어를 사용해 콘솔로 검색할수 있음
npm search express 명령어로 express 를 검색해보았음 
package.json에 넣어둔 keywords가 이때 사용됩니다.

npm info 패키지명 패키지의 세부 정보를 파악하고자 할떄 사용하는 명령어임
package.json의 내용과 의존관계, 설치 가능한 버전 정보등이 표시됨

npm adduser는 npm 로그인을 위한 명령어임 
npm 공식 사이트에서 가입한 계정으로 로그인 하면 됨

나중에 패키지를 배포할 때 로그인이 필요 
패키지를 배포하지 않을것이라면 npm에 가입할 필요는 없음

npm version 버전 명령어를 사용하면 package.json의 버전을 올려줌

////////5-5 패키지 배포하기

책 참조