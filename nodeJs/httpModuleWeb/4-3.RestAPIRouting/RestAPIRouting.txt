서버에 요청을 보낼때는 주소를 통해 요청의 내용을 표현함
주소가 /index.html 이면 서버의 index.html 보내달라는 뜻
/about.html 이면 about.html 을 보내달라는 뜻임

항상 html을 요구할 필요는 없음
server5.js 에서도 /login이라는 주소를 통해서 html을 요청하는 대신 세션저장이라는 동작을 취하길 요청했습니다.
이렇게 요청이 주소를 통해 들어오므로 서버가 이해하기 쉬운 주소를 사용하는것이 좋음
여기서 REST API가 등장함

REST API 는 REpresentational State Transfer 의 약어임 네트워크 구조의 한 형식임
서버의 자원을 정의하고 자원에 대한 주소를 지정하는 방법을 가리킴
주소는 의미를 명확히 전달하기 위해 명사로 구성됨
/user 이면 사용자 정보에 관련된 자원을 요청하는것
/post라면 게시글에 관련된 자원을 요청하는것이라고 추측할수 있음

REST API는 주소외에도 HTTP 요청 메서드 라는것을 사용함 
폼 데이터를 전송할때 GET 또는 POST 메서드를 지정해 보았으면 GET 과 POST 가 요청메서드 라는것을 알수있음
거기에 PUT,PATCH , DELETE 까지 총 다섯개가 메서드로 많이 사용됨

GET: 서버자원을 가져 오고자 할떄 사용함 . 요청의 본문 (body)에 데이터를 넣지 않음.데이터를 서버로 보내야 한다면 쿼리스트링을 사용함
POST:서버에 자원을 새로 등록하고 할떄 사용 함 요청의 본문 에 치환할 데이터를 넣어 보냄
PUT : 서버의 자원을 요청에 들어있는 자원으로 치환하고자 할떄 사용함 . 요청의 본문에 치환할 데이터를 넣어 보냄
PATCH : 서버 자원의 일부만 수정하고자 할떄 사용함. 요청의 본문에 일부 수정할 데이터를 넣어 보내달라는
DELETE: 서버 자원을 삭제하고자 할떄 사용함

주소 하나가 요청 메서드를 여러개 가질수 있음

GET 메서드의 /user 주소로 요청을 보내면 사용자 정보를 가져오는 요청이라는것을 알수있고 ,
POST 메서드의 /user주소로 요청을 보내면 새로운 사용자를 등록한다는것을 알수있음

이렇게 주소와 메서드만 보고 요청의 내용을 명확하게 알아볼수 있다는 것이 장점 
또한 GET메서드 같은 경우에는 브라우저에서 캐싱할수도 있어서 같은 주소의 GET요청을 할떄 서버에서 가져오는 것이 아니라 캐시에서도 가져올수 있음
이렇게 캐싱이 되면 성능이 좋아짐

그리고 HTTP 프로토콜을 사용하면 클라이언트가 누구든 상관없이 서버와 소통할수 있음
iOS , 안드로이드 웹 이 모두 같은 주소로 요청을 보낼수 있음 .
즉 서버와 클라이언트가 분리되어 있다는 뜻입니다.
이렇게 서버와 클라이언트를 분리함녀 추후에 서버를 확장할떄 클라이언트에 구애되지 않아 좋다.

이제 REST API를 사용한 주소 체계로 RESTful 한 웹서버를 만들어 보겠음 
REST API를 따르는 서버를 RESTful 하다고 표현한다. 
코드를 작성하기 전에 대략적인 주소를 먼저 설계하는 것이 좋음

구조를 미리 머릿속에 정리해둔후 코딩을 시작하면 더욱 체계적으로 프로그래밍 할수 있음

GET   주소 / 역할 restFront.html 파일 제공
      주소 /about 역할 about.html 파일 제공
      주소 /Users 역할 사용자 목록 제공
      주소 기타 역할 기타 정적 파일제공
POST  주소 /Users 역할 사용자 등록
PUT   주소 /Users/사용자id 역할 해당 id의 사용자 수정
DELETE 주소 /Users/사용자id 역할 해당 id의 사용자 제거




Network 탭에서 네트워크 요청내용을 실시간으로 볼수 있음
REST API방식으로 주소를 만들었으므로 주소만 봐도 요청 내용을 유추할 수 있음
Name은 요청 주소를  Method는 요청메서드를  status HTTP응답코드를 protocol은 HTTP프로토콜을 Type은 요청의 종류를 의미함 xhr 은 AJAX요청

POST /users 는 사용자를 등록하는 요청임
DELETE /user/1501550586127 해당키를 가진 사용자 정보를 제거하는 요청 
등록 수정 삭제가 발생할떄 마다 GET /users 로 갱신된 사용자 정보를 가져오고 있음
데이터는 메모리상의 변수에 저장되어 있으므로 서버를 종료하기 전까지 유지됨 
만약 데이터가 유지되길 원한다면 데이터베이스 부분을 공부해야됨