MySQL만 알고 있어도 많은 곳에서 사용할 수 있지만 
다른 유형의 데이터베이스인 MongoDB를 알아둔다면 더욱 다양한 프로그램을 만들수 있음
몽고디비의 특징중 하나는 자바스크립트 문법을 사용한다는 것임
하나의 언어만 사용하면 되므로 생산성도 매우 높음 
하지만 MongoDB 는 흔히 사용하는 RDBMS가 아니라 특색이 뚜렷한 NoSQL이므로 특징을 잘알고 사용해야함

8.1 NoSQL VS MySQL만
MySQL은 SQL을 사용하는 대표적인 데이터베이스이며 
SQL을 사용하지 않는 NoSQL이라고 부르는 데이터 베이스도 있음

MongoDB는 NoSQL의 대표 주자임

SQL NoSQL 비교

SQL
규칙에 맞는 데이터 입력
테이블 간 JOIN 지원
트랜잭션 지원
안정성  일관성
용어(테이블,로우,컬럼)

NoSQL 
자유로운 데이터 입력
컬렉션간 JOIN 미지원
트랜잭션 미지우너
확장성 , 가용성
용어(컬렉션 , 다큐먼트 ,필드)

먼저 NoSQL에는 고정된 테이블이 없음
테이블에 상응하는 컬렉션이라는 개념이 있긴 하지만 컬럼을 따로 정의 하지 않음
예를 들어 MySQL은 users 테이블을 만들떄 name,age,married 등의 컬럼과 자료형 , 옵션 등을 정의하지만
MongoDB는 그냥 users 컬렉션을 만들고 끝임
users 에는 어떤 데이터라도 다 들어갈 수 있음
어떤 다큐먼트(MySQL의 로우에 해당하는 개념)에는 name,age,married 데이터가 
다른 다큐먼트에는 name, comment ,createdAt,updatedAt등의 데이터가 들어갈 수 있음

MongoDB에는 MySQL과 달리 JOIN기능이 없음 
JOIN을 흉내낼수는 있지만 하나의 쿼리로 여러 테이블을 합치는 작업이 항상 가능하지는 않음
트랜잭션을 지원하지 않는 것도 몽고디비의 특징중 하나임
트랜잭션이란 여러쿼리가 모두 정상적으로 수행되거나 아예 하나도 수행되지 않음을 보장하는 기능임
예를 들어 ATM기기에서 다른사람에게 송금한다고 하면 계좌 테이블에서 내 계좌 로우를 찾아 금액을 빼고 다른 사람 계좌 로우에 금액을 추가해야됨
두 쿼리를 수행하는 중 에러가 생겨 하나의 쿼리만 수행된다면 돈이 중간에 사라지거나 없던 돈이 생기는 등 문제가 발생함
트랜잭션은 이러한 일이 발생하지 않도로 보장하는 기능임 
트랜잭션 기능이 아예 없다고는 말할 수 없지만,
MySQL같은 수준의 트랜잭션은 없음
따라서 데이터 일관성에 문제가 생길수 있음

--몽고디비의 트랜잭션
현재 대중적으로 사용되는 몽고디비의 버전은 3임 .
몽고디비는 4버전부터 트랜잭션을 지원하겠다고 발표했음
트랜잭션이 지원되면 데이터의 일관성을 유지하는데 큰 도움이 될것임


트랜잭션과 JOIN이 안되지만 몽고디비를 사용하는 이유 확장성과 가용성때문임
데이터의 일관성을 보장해주는 기능이 약한 대신 데이터를 빠르게 넣을수 있고 , 쉽게 여러 서버에 데이터를 분산할 수 있음

용어도 조금 다름 
MySQL의 테이블 , 로우 ,컬럼을 몽고디비에서는 각각 컬렉션,다큐먼트 ,필드 라고 부르는

애플리케이션을 만들때 SQL 과 NoSQL동시에 사용해도됨
각각 특징이 다르므로 알맞은 곳에 사용하면됨
예를 들어 항공사 예약시스템의 경우 비행기 표에 관한 정보가 모든 항공사에 일관성있게 전달되어야 하므로 예약처리부분의 데이터베이스는 MySQL을 사용함
대신 핵심 기능 외의 빅데이터 ,메시징 ,세션 관리 등에는  확장성과 가용성을 위해 몽고디비를 사용함

8.2 MongoDB 설치하기

몽고디비는 https://www.mongodb.com/download-center/community

윈도 서버용 다운로드 

책의 예제는 3.6버전을 썼으므로 설치하는것도 3.6으로 설치
서버를 실행하기 전에 데이터가 저장될 폴더를 먼저 만듬
윈도우의 경우 C:\에 data 폴더를 만들고 다시 그 안에 db폴더를 만들면됨
몽고디비가 설치된 경로 (기본적으로 C:\Program Files\MongoDB\Server\3.6\bin) 이동해서 
몽고디비를 실행함
C:\data\db 폴더가 없으면 반드시 만들고 진행
콘솔에서 .\mongod 명령어를 입력하여 몽고디비를 실행함
27017 포트에서 연결대기중이라는 메시지가 떴다면 실행에 성공한 것임
몽고디비를 사용할 일이 있을떄마다 mongod 명령어로 먼저 서버를 실행해야 함
몽고디비 프롬프트에 접속하려면 같은 폴더에서 콘솔을 하나 더 열어 .\mongo 명령어를 입력함
프롬프트가 > 로 바꿔었으면 성공한것임

현재 누구나 몽고디비에 접속할 수 있으므로 관리자 계정을 추가함
use admin
db.createUser({user:'root',pwd:'root',roles:['root']})
db.createUser 메서드로 계정을 생성할 수 있음
user에 사용자 이름을 넣고 pwd 자리에 사용할 비밀번호를 입력함 기억하고 있어야 됨
roles 로는 현재 모든 권한이 있는 root를 부여했음
나중에 실무에서는 상황에 맞는 역할을 부여하면 됨
아까 mongod를 입력했던 콘솔을 종료하고 이번에는 mongod --auth 명령어로 접속 --auth 는 로그인이 필요하다는 뜻임
이제 mongo를 입력했던 콘솔도 종료하고 다시 mongo admin -u 이름 -p 비밀번호 명령어로 접속함

8.3.4 커넥션 생성하기
몽고디비를 실행한후 컴퍼스로  접속함
컴퍼스 설치 시 MongoDB Compass 와 MongoDB Compass Community 가 설치되는데 MongoDB Compass Community를 실행하면 됨

8.4 데이터베이스 및 컬렉션 생성하기

이제 nodejs 라는 이름의 데이터베이스와 MySQL의 테이블과 상응하는 컬렉션들을 만들거임
몽고디비 프롬프트 접속
프롬프트 2개
1번쨰는 mongod
2번쨰는 mongo admin -u root -p root

데이터베이스 만들기
use nodejs

데이터베이스 목록 확인
show dbs

하면 nodejs 없을거임 
당황할 필요없음 데이터를 최소 한개이상 넣어야 목록에 표시됨
현재 사용중인 데이터베이스를 확인하는것은  명령어 db

컬렉션은 따로 생성할 필요가 없음
다큐먼트를 넣는 순간 컬렉션도 자동으로 생성됨
하지만 다음과 같이 직접 컬렉션을 생성하는 명령어가 있긴함

db.createCollection('users')
db.createCollection('comments')

생성 컬렉션 목록 확인 
show collections


8.5 CRUD 작업

몽고디비에서 CRUD 작업을 할것임

컬렉션에 컬럼을 정의하지 않아도 되므로 컬렉션에는 아무 데이터나 넣을 수 있음
이러한 자유로움이 몽고디비의 장점
단 무엇이 들어올지 모른다는 단점도 있음
몽고디비의 자료형은 MySQL과는 조금 다름 
몽고디비의 자료형 
기본적으로 자바스크립트의 문법을 사용하므로 자바스크립트의 자료형을 따름
하지만 추가로 몇가지 자료형이 더있음

Date나 정규표현식 같은 자바스크립트 객체를 자료형으로 사용할수 있고 ,
Binary Data, ObjectId , Int ,Long,Decimal,Timestamp,Javascript 등의 추가적인 자료형중에서 
ObjectId와 Binary Data,Timestamp외에는 잘 사용되지 않음
ObjectId는 MySQL에서 기본 키로 쓰이는 값과 비슷한 역할을 한다고 생각하면됨
고유한 값을 가지므로 다큐먼트를 조회 할떄 사용함
몽고디비 프롬프트 실행
mongo
use nodejs
8.5.1 Create 생성
다큐먼트 생성
db.컬렉션명.save(다큐먼트)
db.users.save({name:'kim',age:'29',married:false,comment:'안녕하세요. 간단한 몽고 디비 사용방법입니다',createdAt:new Date()});
자바스크립트 객체처럼 생성하면 도미
new Date()는 현재 시간을 입력하라는 뜻
 명령이 성공적으로 수행되면
 WriteResult({ "nInserted" : 1 })이라는 응답이 옴
 다큐먼트가 하나 생성되었다는 뜻임


 comments 컬렉션에도 데이터를 넣어봄
kim의 댓글을 넣을것이므로 kim의 아이디를 알아야됨
db.users.find({name:'kim'},{_id:1})
{ "_id" : ObjectId("5c4329a3767e36ccd6988121") }
하면  kim의 아이디가 ObjectId("5c4329a3767e36ccd6988121") 나옴
이 문자는 사용자 마다 다름
그 뒤
db.comments.save({commenter:ObjectId("5c4329a3767e36ccd6988121"),comment:'안녕하세요 kim의 댓글입니다.',createdAt:new Date()});

--컴퍼스 사용시
컴퍼스를 사용하면 손쉽게 데이터를 생성할수 있음
먼저 user컬렉션으로 들어감
하나의 데이터를 몽고디비에서는 다큐먼트라고 부름
INSERT DOCUMENT 버튼을 눌러 다큐먼트를 생성해봄

8.5.2 Read(조회)
방금전에 생성한 다큐먼트들을 조회해보겠음

//컬렉션 내의 모든 다큐먼트를 조회하라는 뜻
db.users.find({})

//특정필드만 조회하고 싶다면 다음과 같이하면됨 . name과 married 필드만 가져옴
//find메서드의 두번쨰 인자로 조회할 필드를 넣었음
//1또는 true로 표시한 필드만 가져옴 
//_id는 기본적으로 가져오게 되어있으므로 0이나 false로 입력해 가져오지 않도록 해야됨   0 or 1 가져오지 않거나 가져오거나
db.users.find({},{_id:0,name:1,married:1});


//조회시 조건을 주려면 첫번쨰 인자 객체에 기입하면됨
//age가 30초과 , married가 true인 다큐먼트의 이름과 나이
db.users.find({age:{$gt:30},married:true},{_id:0,name:1,age:1});
자주 쓰이는 연산자로 $gt $lt $gte $lte $ne $or $in

//or  age가 30초과 이거나 married가 false인 다큐먼트 조회

db.users.find({$or:[{age:{$gt:30}},{married:false}]},{_id:0,name:1,age:1})

//정렬도 가능 sort 메서드 나이 많은 순서대로 정렬 -1은 내림차순 1은 오름차순   -1 사용 

db.users.find({},{_id:0,name:1,age:1}).sort({age:-1})

//조회할 다큐먼트 개수를 설정할수도 있음 limit 메서드를 사용함

db.users.find({},{_id:0,name:1,age:1}).sort({age:-1}).limit(1)

//다큐먼트 개수를 설정하면서 몇개를 건너 뛸지를 설정할수 도 있음 skip 메서드

db.users.find({},{_id:0,name:1,age:1}).sort({age:-1}).limit(1).skip(1)

컴퍼스를 사용하면 조회하기 쉬움

8.5.3 update(수정)

기존 데이터 수정 
db.users.update({name:'kim'},{$set:{comment:'안녕하세요 이 필드를 바꿔봄'}})
첫번쨰 객체는 수정할 다큐먼트를 지정하는 객체고, 두번째 객체는 수정할 내용을 입력하는 객체

$set이라는 연산자가 사용됨
이 연산자는 어떤 필드를 수정할지 정하는 연산자임 
만약 이 연산자를 사용하지 않고 일반 객체를 넣는다면 다큐먼트가 통째로 두번째 인자로 주어진 객체로 수정되어 버림
따라서 일부 필드만 수정하고 싶을때는 반드시 $set 연산자를 지정해야함
수정에 성공했다면 첫번째 객체에 해당하는 다큐먼트 수(nMatched)와 수저된 다큐먼트 수 (nModified)가 나옴

8.5.4 Delete(삭제)
db.users.remove({name:'kim'});
삭제할 다큐먼트에 대한 정보가 담긴 객체를 첫번째 인자로 제공하면됨
성공시 삭제된 개수가 반환됨

8.6 몽구스 사용하기
MySQL에는 시퀄라이즈가 있다면 몽고디비에는 몽구스가 있음