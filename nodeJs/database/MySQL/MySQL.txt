MySQL은 SQL언어를 사용하는 관계형 데이터베이스 관리 시스템
몽고디비는 NoSQL

MySQL

데이터베이스는 관련성을 가지며 중복이 없는 데이터들의 집합임
이러한 데이터베이스를 관리하는 시스템을 DBMS(데이터베이스 관리 시스템)라고 부름

서버의 하드디스크나 ssd 저장매체에 데이터 저장함
저장매체 고장 또는 사용자가 직접 데이터를 지우지 않는 이상 계속 데이터가 보존되므로 서버종료 여부와 상관없이 데이터를 계속 사용할수 있음
또한 서버에 데이터베이스를 올리면 여러사람이 동시에 사용할수 있음
사람들에게 각각 다른 권한을 주어 어떤사람은 읽기만 가능 어떤사람은 모든작업을 가능하게 할수 있음

RDBMS  
oracle MySQL  mssql 등이 있는데 
실습은 MySQL

설치

용량이 작은 web-community

서버와 
워크벤치 만골라서 설치
설치하다가 Use Legacy Authentication Method를 선택함
대부분 회사가 MySQL5 버전대를 사용하고 있으므로 호환되는 모드를 사용하는게 좋음

비밀번호는  알아서 설정

mysql 설치 폴더 경로(bin 폴더)로 콘솔에서 이동 한뒤 
C:\Program Files\MySQL\MySQL Server 8.0\bin>
mysql -h localhost -u root -p 

파워쉘에서 안먹히면 맨앞에 .\ 를 붙임
들어가지면 설치완료된것

워크벤치 들어가면 root 계정 커넥션 된 거 있을거임
접속

7.4 데이터베이스 및 테이블 생성
데이터 베이스 생성
CREATE SCHEMA 데이터베이스명
CREATE DATABASE 데이터베이스명

생성확인
SHOW DATABASES;

생성후 사용
use 데이터베이스명

테이블 생성
CREATE TABLE nodejs.users(id INT NOT NULL AUTO_INCREMENT,
 name VARCHAR(20) NOT NULL,
 age INT UNSIGNED NOT NULL,
 married TINYINT NOT NULL,
 comment TEXT NULL,
 created_at DATETIME NOT NULL DEFAULT now(),
 PRIMARY KEY(id),
 UNIQUE INDEX name_UNIQUE (name ASC)) COMMENT = '사용자 정보'
 DEFAULT CHARSET = utf8
 ENGINE=InnoDB;

 테이블 확인
 desc users;

 테이블 삭제
 drop table users;

기본적인 mysql 문법은  MySQLStudy.txt 참고
/////////////////////////////////////////////////////////////////////////////
7.6 시퀄라이즈 사용하기 
기본적인 문법을 숙지했다면 
노드에서 MySQL데이터베이스에 접속해보겠음
MySQL작업을 쉽게할수 있도록 도와주는 라이브러리가 있음
바로 Sequelize 임
시퀄라이즈는 ORM(Object-relational Mapping)으로 분류됨. ORM 은 자바스크립트 객체와 데이터베이스의 릴레이션을 매핑해주는 도구임
시퀄라이즈를 MySQL하고만 같이 써야하는것은 아님
MariaDB ,PostgreSQL, SQLite,MSSQL 등 다른 데이터베이스도 같이 쓸수 있음
문법이 어느 정도 호환되므로 다른 SQL데이터베이스로 전환할 떄도 편리함
시퀄라이즈를 쓰는 이유는 자바스크립트 구문을 알아서 SQL로 바꿔주기 떄문임!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
따라서 SQL언어를 직접 사용하지 않아도 자바스크립트만으로 MySQL을 조작할 수 있음
SQL을 몰라도 MySQL을 어느정도 다룰 수 있게됨 
SQL을 모르는 채로 시퀄라이즈를 사용하는 것을 추천하지는 않음

Express-generator 로 새프로젝트를 생성하고 시퀄라이즈를 설치함
express learn-sequelize --view=pug

learn-sequelize 폴더로 이동해 npm 패키지들을 설치
npm i

이제 시퀄라이즈에 필요한 sequelize와 mysql2 패키지를 설치하겠음
npm i sequelize mysql2
그후 sequelize커맨드를 사용하기 위해 sequelize-cli를 전역 설치 하겠음
npm i -g sequelize-cli
설치 완료후 sequelize init 명령어를 호출 하면 됨
sequelize init

sequelize init 명령어 호출시 나오는 WARNING은 무시해도됨
config , models,migrations,seeders 폴더가 생성됨 models 폴더안의 index.js 를 확인

models/ index.js
sequelize-cli 가 자동으로 생성해주는 코드는 그대로 사용했을떄 에러가 발생하고 필요없는 부분도 많으므로 다음과 같이 수정함
const path = require('path');
const Sequelize = require('sequelize');

const env = process.env.NODE_ENV || 'development';
const config = require(path.join(__dirname, '..', 'config', 'config.json'))[env];
const db = {};

const sequelize = new Sequelize(config.database, config.username, config.password, config);

db.sequelize = sequelize;
db.Sequelize = Sequelize;
module.exports = db;

7.6.1 MySQL 
이제 시퀄라이즈를 통해 익스프레스 앱과 MySQL을 연결함 
app.js 에 추가

var indexRouter = require('./routes/index');
var userRouter = require('./routes/users');
var sequelize = require('./models).sequelize');

var app = express();
sequelize.sync();

require('./models')는 var sequelize = require('./models').sequelize와 같음 
폴더 내의 index.js파일은 require시 이름을 생략할 수 있음
sync 메서드를 사용하면 서버 실행시 알아서 MySQL과 연동됨

7.6.2 이제 MySQL에서 정의한 테이블을 시퀄라이즈에서도 정의해야 함.
MySQL의 테이블은 시퀄라이즈의 모델과 대응됨
시퀄라이즈는 모델과 MySQL의 테이블을 연결해주는 역할을 함
User 와 Comment 모델을 만들어 users 테이블과 comments 테이블에 연결해 볼것임
시퀄라이즈는 시본적으로 모델 이름은 단수형으로 테이블이름은 복수형으로 사용함!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

models 밑에 user.js 작성
models 밑에 comment.js 작성
참조

모델을 생성했다면 models/index.js 와 연결함

마지막으로 config 폴더안의 config.json을 수정
development.password와 development.database를 현재 MySQL커넥션과 일치하게 수정하면됨

operatorsAliases 보안에 취약한 연산자를 사용할지 여부를 설정하는 옵션임 false

나중에 배포할떄는 process.env.NODE_ENV를 production으로 설정해두면됨
따라서 배포 환경을 위해 데이터 베이스를 설정 할떄는 config/config.json의 production속성을 수정하면됨
테스트환경일때는 test속성을 수정하면됨

이제 users 테이블과 comments 테이블간의 관계를 설정할 거임

7.6.3 관계 정의 하기

사용자 한명은 댓글을 여러개 작성할 수 있음 
하지만 댓글 하나에 사용자가 여러명일수는 없음
이러한 관계를 1 대 다 라고함
1대 1 관계로는 사용자와 사용자에 대한 정보 테이블을 예로 들수 있음
다대다 관계는 게시글 테이블과 해시태그 테이블 관계로 예를 들수 있음
한 게시글에는 해시태그가 여러개 달릴수 있고 한 해시태그도 여러 게시글에 달릴수 있음

MySQL에서는 JOIN이라는 기능으로 여러테이블간의 관계를 파악해 결과를 도출함 
시퀄라이즈는 JOIN기능도 알아서 구현해줌
대신 시퀄라이즈에게 테이블간에 어떠한 관계가 있는지 알려줘야함

7.6.3.1 1 : N 
시퀄라이즈 에서는 1 : N 관계를 hasMany 라는 메서드로 표현함
users테이블의 로우하나를 불러올떄 연결된 comments 테이블의 로우들도 같이 불러올수 있음
반대로 belongsTo메서드도 있음
comments테이블의 로우를 불러올떄 연결된 users테이블의 로우를 가져옴

1        :        N 
User            Comment
---------------------->hasMany
<----------------------belongsTo

models/index.js 에서 모델들을 연결해준 곳 밑에 관계설정을 추가로 넣어줌

관계를 설정한뒤 
시퀄라이즈는 방금 index.js 에 정의한대로 테이블간 관계를 파악해서 commenter 컬럼을 추가하고 외래키도 추가하고
외래 키 컬럼은 commenter고 user의 id컬럼을 가리키고 있으므로
foreignKey속성에 commenter 를 넣어줌
hasMany메서드에서는 sourceKey속성에 id를 넣어주고 ,belongsTo메서드에서는 targetKey속성에 id를 넣어줌
User모델의 id가 Comment모델의 commenter컬럼에 들어가는것임

learn-sequelize 폴더로 가서 
npm start를 하면 시퀄라이즈가 SQL문을 스스로 실행함 

7.6.3.2  1:1
1:1 관계에서는 hasMany메서드 대신 hasOne 메서드를 사용함 
사용자 정보를 담고있는 Info모델이 있다고 하면 다음과 같이 표현할수 있음
db.User.hasOne(db.Info,{foreignKey:'user_id',sourceKey:'id'});
db.Info.belongTo(db.User,{foreignKey:'user_id,sourceKey:'id'});
반대여도 상관없음 1대1 이라서 

7.6.3.3  N : M 
게시글과 해시태그 모델간의 다대다 관계
게시글하나에 태그가 여러개
태그하나에 게시글이 여러개 

시퀄라이즈에서는 N : M 관계를 표현하기 위해 belongsToMany 라는 메서드가 있음
게시글 정보를 담고있는 가상의 Post 모델과 해시태그정보를 담고 있는 가상의 Hashtag 모델이 있다고 하면 다음과 같이 표현 할수 있음

db.Post.belongsToMany(db.Hashtag,{through:'PostHashtag'});
db.Hashtag.belongToMany(db.Post,{through:'PostHashtag'});
N:M관계 특성상 새로운 모델이 생성됨 
through 속성에 그 이름을 적어주면 됨
새로 생성된 PostHashtag 모델에는 게시글과 해시태그의 아이디가 저장됨
9장의 예제에서 N:M 관계를 사용하는 것을 볼 수 있음
NMRelation.jpg 참조
시퀄라이즈는 이 과정을 편하게 할수 있도록 몇가지 메서드를 지우너함
async(req,res,next)=>{
    const tag = await Hashtag.find({where:{title:'노드'}});
    const posts = await tag.getPosts();
}
먼저 해시태그를 찾으면 그 해시태그에서 getPost 메서드를 사용할수 있음 
get+모델이름의 복수형임

async / await 코드에 익숙 하지 않으면 프로미스 형태도 확인
//프로미스 형식
Hashtag.find({where:{title:'노드'}})
    .then(tag=>tag.getPosts())
    .then(posts=>console.log(posts));

앞으로는 async/await 코드가 나오니 익혀두는 것이 좋음
어렵다면 먼저 프로미스 형식으로 코드를 작성한후 async/await으로 코드를 전환하면됨
비슷한 것으로 add+모델이름의 복수형 메서드도 있음
두 테이블 간 N:M관계를 추가해줌
다음 코드는 title이 노드인 해시태그와 게시글 아이디가 3인 게시글을 연결하는 코드임

async(req,res,next){
    const tag = await.Hashtag.find({where:{title:'노드'}});
    await tah.setPosts(3)
}

PostHashtag 모델에 postId가 3이고 hashtagId 가 1인 로우가 생성됨

CRUD 작업을 진행해 보겠음

7.6.4 쿼리 알아보기
시퀄라이즈로 CRUD 작업을 하려면 시퀄라이즈 쿼리를 알아야됨
SQL문을 자바스크립트로 생성하는것이라서 시퀄라이즈 만의 방식이 있음 
쿼리는 프로미스를 반환하므로 then을 붙여 결과값을 받을 수 있음
async/await 문법과 같이 사용할 수 있음

로우를 생성하는 쿼리부터 알아보겠음
예)SQL 문
INSERT INTO nodejs.users(name,age,married,comment) VALUES ('kim',24,0,'소개1');
예)시퀄라이즈 쿼리 - 로우생성
const { User } = require('../models')
User.create({
    name:'zero',
    age:24,
    married:false,
    comment:'소개1'
});

models 모듈에서 User모듈을 불러와 create메서드를 사용하면 됨 
앞으로 나오는 모든 메서드는 User 모델을 불러와서 사용하는 예제로 하겠음
한가지 주의 할점은 MySQL자료형이 아니라 시퀄라이즈 모델에 정의한 자료형 대로 넣어야됨!~!!!!!!!
married 가 mysql 에서는 TINYINT 로 되어있어 숫자로 넣어야 할거같지만 married 는 시퀄라이즈에서 boolean으로 정의 되어 있기 떄문임
자료형 안맞으면 오류뜸

예)로우 조회-모든 데이터 조회 
SELECT * FROM nodejs.users;
User.findAll({});

//Users테이블의 데이터 하나만 가져오는 SQL문임 
//앞으로 데이터를 하나만 가져올떄는 find 메서드를 여러개 가져올떄는 findAll 메서드를 사용한다고 생각하면됨

SELECT * FROM nodejs.users LIMIT 1;
User.find({});

//원하는 컬럼만 가져오고 싶을떄  attributes 사용

SELECT name , age FROM nodejs.users;
User.findAll({
    attribute:['name','age']
})

//where 옵션 조건들을 나열함
/*
시퀄라이즈는 자바스크립트 객체를 사용해서 쿼리를  생성해야하므로 0p.gt 같은 특수한 연산자가 사용됨
Sequelize객체 내부의 0p객체를 불러와 사용함 
0p.gt(초과) 0p.gte(이상)  0p.lt(미만)  0p.lte(이하) 0p.ne (같지않음 )등
or 또는 , in 배열요소중하나 , notIn 배열요소와 모두 다름 
*/
SELECT name , age FROM nodejs.users WHERE married = 1 AND age > 30;

const{ User, Sequelize:{ 0p }}=require('../models');
User.findAll({
    attribute:['name','age'],
    where:{
        married:1,
        age:{[0p.gt]:30}
    }
})

예)0p.or 사용 해보겠음   기억해두기
SELECT name , age FROM nodejs.users WHERE married = 0 OR age > 30;

const{ User, Sequelize:{ 0p }}=require('../models');
User.findAll({
    attribute:[name,age],
    where:{
        [0p.or]:[{married:0},{age:{[0p.gt]:30}}]
    }
})


예) order by 정렬
//시퀄라이즈의 정렬방식임 order 옵션으로 가능 함 
배열안에 배열이 있다는 점을 주의할것
SELECT id , name FROM users ORDER BY age DESC;

USER.findAll({
    attributes:['id','name'],
    order:[['age','DESC']]
})


예)다음은 조회할 로우 개수를 설정하는 방법임
LIMIT 1 인 경우에는 findAll 대신 find 메서드를 사용해도 되지만 다음과 같이 할 수 있음

SELECT id ,name FROM users ORDER BY age DESC LIMIT 1;
User.findAll({
    attributes:['id','name'],
    order:[['age',DESC]],
    limit:1
})

예)OFFSET
SELECT id ,name FROM users ORDER BY age DESC LIMIT 1 OFFSET 1;

User.findAll({
    attributes:['id','name'],
    order:[['age',DESC]],
    limit:1,
    offset:1
})

예)이번에는 로우를 수정하는 쿼리는
UPDATE nodejs.users SET comment = '바꿀 내용' WHERE id = 2;
User.update({
    comment:'바꿀 내용'
},{
    where:{id:2}
});
update 메서드로 수정할 수 있음
첫번째 인자는 수정할 내용이고 두번쨰 인자는 수정 대상 로우를 찾는 조건임 where 옵션에 조건들을 적어줌

예) 로우를 삭제하는 쿼리임 
DELETE FROM nodejs.users WHERE id = 2;

User.destroy({
    where:{id:2}
})

destroy 메서드로 삭제함

7.6.5 쿼리 수행하기
배웠던 쿼리로 CRUD작업을 해봄

모델에서 데이터를 받아서 페이지를 렌더링하는 방식과 JSON 형식으로 데이터를 가져오는 방식 두가지를 알아보겠음

간단하게 사용자 정보를 등록하고 사용자가 등록한 댓글을 가져오는 서버임
먼저 다음과 같이 views폴더에 sequelize.pug 파일을 만듬 
4.3 장에 restFront.html 처럼 AJAX를 사용해 서버와 통신함 직접 입력하기에는 코드량이 많으므로 복사해서 붙여넣는것을 추천

sequelize.pug를 만든뒤 public 폴더안에 sequelize.js 파일도 만듬

HTML 쪽보다는 서버 코드 위주로 보면 됨 GET POST DELETE PUT
script 태그에는 버튼들을 눌렀을떄 서버의 라우터로 AJAX 요청을 보내는 코드가 들어 있음
조금 뒤에 만들 라우터들을 미리 app.js에 연결해줌 
app.js 
var commentsRouter = require('./routes/comments'); 

app.use(express.static(path.join(__dirname,'public')));

app.use('/comments',commentsRouter);

추가

route라우터 내용도 추가 GET POST DELETE PUT 요청에 해당하는 라우터를 만듬
routes/index.js 참조
var express = require('express');
var User = require('../models').User;

var router = express.Router();

router.get('/', function(req, res, next) {
  User.findAll()
    .then((users) => {
      res.render('sequelize', { users });
    })
    .catch((err) => {
      console.error(err);
      next(err);
    });
});

module.exports = router;

//async/await
async/await

router.get('/',async(res,req,next)=>{
  try{
    const users = await User.findAll();
    res.render('sequelize,{ users });
  }catch(error){
    console.log(error);
    next(error);
  }
});

module.exports = router;

routes/comments.js
/*
댓글에 관련되 CRUD 작업을 하는 라우터임
GET /comments , POST /comments ,
PATCH /comments/:id, DELETE /comments/:id 를 등록
*/

/*
//조회
findAll 메서드에 옵션이 추가되어 있음
include옵션으로 관련있는 모델을 불러올수 있음
hasMany나 belongsTo로 연결해두어야 include 옵션을 사용할 수 있음
include 옵션에서 models 속성에는 User 모델을 where 속성에는 :id 로 받은 아이디 값을 넣어줌 
:id는 와일드카드 라우터임

//등록
댓글을 생성하는 라우터임 
commenter 속성에 사용자 아이디를 넣어 사용자와 댓글을 연결해줌

//수정 삭제
각각 update , destroy 메서드를 사용함 
update 메서드에는 먼저 첫번쨰 인자로 수정할 컬럼과 값이 들어있는 객체를 제공하고 두 번째 인자로는 어떤로우를 수정할 것인지에 대한 조건을 제시함 
where옵션으로 id가 :id에 해당하는 값인 댓글을 수정하도록했음
destroy 메서드에도 update메서드와 유사하게 where 옵션으로 어떤로우를 삭제할지 지정해줌

*/

이제 서버를 재실행하고 http://localhost:3000으로 접속 

콘솔에는 시퀄라이즈가 수행하는 SQL문이 나오므로 어떤동작을 하는지 확인가능

중요!!!!
얀(Yarn)은 자바스크립트의 새로운 패키지 매니저이다. 더욱 빠르게 패키지를 인스톨하는 방법과 의존성 관리를 다양한 디바이스(across machines)에서 일관성 있게 하는 방법
자바스크립트 세계에서 개발자는 코드의 패키지를 공유하고 이를 조립하여 프로젝트를 빌드하는 도구로 패키지 매니저를 사용한다. 
전 세계적으로 가장 인기있는 자바스크립트 패키지 매니저는 npm이다. 
이것은 엄청난 양의 패키지(jQuery, Bootstrap, React와 Angular 같은)를 호스팅 하고 있다.
 그러나 npm이 자바스크립트 커뮤니티에서 많이 사용된다 하더라도, 단점 역시 존재한다. 
 이것이 페이스북, Exponent, 구글과 Tilde의 엔지니어 그룹들이 함께 협력하여 npm의 핵심 이슈를 해결하기 위해 새로운 패키지 매니저를 만든 이유이다.
  이 새로운 자바스크립트 패키지 매니저가 얀(Yarn)이다

프로젝트있는 폴더에
  얀설치
  npm install -g yarn
  얀을 최신버전으로 업데이트
  yarn self-update

  얀 의존성 주기 위해
  package.json > scripts 부분에
 "scripts": {
    "start": "node ./bin/www",
    "dev": "nodemon ./bin/www" <-- 이부분을 넣어주고
  },

  yarn add nodemon

  실행 yarn dev